{"value":{"content":"// src/utils.ts\nimport fs from \"fs\";\nimport path from \"path\";\nfunction isJsTypeFile(fileName) {\n  if (/(.*).d.ts/.test(fileName)) {\n    return false;\n  }\n  return /.(jsx|tsx|js|ts)$/.test(fileName);\n}\nfunction formatFileSize(size) {\n  const base = 1024;\n  if (size < base) {\n    return size + \"B\";\n  }\n  if (size < Math.pow(base, 2)) {\n    return (size / base).toFixed(2) + \"KB\";\n  }\n  if (size < Math.pow(base, 3)) {\n    return (size / Math.pow(base, 2)).toFixed(2) + \"MB\";\n  }\n  if (size < Math.pow(base, 4)) {\n    return (size / Math.pow(base, 3)).toFixed(2) + \"GB\";\n  }\n  return (size / Math.pow(base, 4)).toFixed(2) + \"TB\";\n}\nfunction getDirFilesMap(rootDir) {\n  const filesMap = /* @__PURE__ */ new Map();\n  function reader(dir) {\n    fs.readdirSync(dir).forEach((file) => {\n      const pathname = path.join(dir, file);\n      const fileStat = fs.statSync(pathname);\n      if (fileStat.isDirectory()) {\n        reader(pathname);\n      } else {\n        filesMap.set(pathname, {\n          id: pathname,\n          path: pathname,\n          fileName: file,\n          parentPath: dir,\n          fileSize: formatFileSize(fileStat.size),\n          size: fileStat.size\n        });\n      }\n    });\n  }\n  reader(rootDir);\n  return filesMap;\n}\nexport {\n  formatFileSize,\n  getDirFilesMap,\n  isJsTypeFile\n};\n","options":{"ext":".js","declaration":true}},"type":"Object"}